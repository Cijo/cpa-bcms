import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { AnomalyDetectorClientContext } from "./anomalyDetectorClientContext";
declare class AnomalyDetectorClient extends AnomalyDetectorClientContext {
    /**
     * Initializes a new instance of the AnomalyDetectorClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions);
    /**
     * This operation generates a model using an entire series, each point is detected with the same
     * model. With this method, points before and after a certain point are used to determine whether
     * it is an anomaly. The entire detection can give user an overall status of the time series.
     * @summary Detect anomalies for the entire series in batch.
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.EntireDetectResponse2>
     */
    entireDetect(body: Models.Request, options?: msRest.RequestOptionsBase): Promise<Models.EntireDetectResponse2>;
    /**
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param callback The callback
     */
    entireDetect(body: Models.Request, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
    /**
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    entireDetect(body: Models.Request, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
    /**
     * This operation generates a model using points before the latest one. With this method, only
     * historical points are used to determine whether the target point is an anomaly. The latest point
     * detecting operation matches the scenario of real-time monitoring of business metrics.
     * @summary Detect anomaly status of the latest point in time series.
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param [options] The optional parameters
     * @returns Promise<Models.LastDetectResponse2>
     */
    lastDetect(body: Models.Request, options?: msRest.RequestOptionsBase): Promise<Models.LastDetectResponse2>;
    /**
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param callback The callback
     */
    lastDetect(body: Models.Request, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
    /**
     * @param body Time series points and period if needed. Advanced model parameters can also be set
     * in the request.
     * @param options The optional parameters
     * @param callback The callback
     */
    lastDetect(body: Models.Request, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
    /**
     * Evaluate change point score of every series point
     * @summary Detect change point for the entire series
     * @param body Time series points and granularity is needed. Advanced model parameters can also be
     * set in the request if needed.
     * @param [options] The optional parameters
     * @returns Promise<Models.ChangePointDetectResponse2>
     */
    changePointDetect(body: Models.ChangePointDetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.ChangePointDetectResponse2>;
    /**
     * @param body Time series points and granularity is needed. Advanced model parameters can also be
     * set in the request if needed.
     * @param callback The callback
     */
    changePointDetect(body: Models.ChangePointDetectRequest, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
    /**
     * @param body Time series points and granularity is needed. Advanced model parameters can also be
     * set in the request if needed.
     * @param options The optional parameters
     * @param callback The callback
     */
    changePointDetect(body: Models.ChangePointDetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
}
export { AnomalyDetectorClient, AnomalyDetectorClientContext, Models as AnomalyDetectorModels, Mappers as AnomalyDetectorMappers };
//# sourceMappingURL=anomalyDetectorClient.d.ts.map